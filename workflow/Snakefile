from snakemake.utils import min_version

min_version("6.10.0")

# Configuration file containing all user-specified settings
configfile: "config/config.yaml"


import os
import csv
import pandas as pd

METADATA=pd.read_csv('resources/metadata/metadata.csv').loc[0:3]
ACCESSIONS=METADATA['sample_id'].tolist() # Specify the column containing the accession, in this demo is Run

# Master rule for controlling workflow.
rule all:
    input:
        "index.html",
        # expand("resources/reads/trimmed/{accession}_{sraNum}.fastq", accession=ACCESSIONS, sraNum=config["sraNum"]),
        # expand("resources/reads/trimmed/decontam/{accession}_{sraNum}.fastq", accession=ACCESSIONS, sraNum=config["sraNum"]),
        # expand("results/qc/fastqc1/{accession}_{sraNum}_fastqc.html", accession=ACCESSIONS, sraNum=config["sraNum"]),
        # expand("results/qc/fastqc1/{accession}_{sraNum}_fastqc.zip", accession=ACCESSIONS, sraNum=config["sraNum"]),
        # expand("results/qc/fastqc2/{accession}_{sraNum}_fastqc.html", accession=ACCESSIONS, sraNum=config["sraNum"]),
        # expand("results/qc/fastqc2/{accession}_{sraNum}_fastqc.zip", accession=ACCESSIONS, sraNum=config["sraNum"]),
        # expand("results/qc/fastqc3/{accession}_{sraNum}_fastqc.html", accession=ACCESSIONS, sraNum=config["sraNum"]),
        # expand("results/qc/fastqc3/{accession}_{sraNum}_fastqc.zip", accession=ACCESSIONS, sraNum=config["sraNum"]),
        # "results/qc/seqkit1/seqkit_stats.txt",
        # "results/qc/multiqc1/multiqc_report.html", 

        # "results/qc/seqkit2/seqkit_stats.txt",
        # "results/qc/multiqc2/multiqc_report.html",

        # "results/qc/seqkit3/seqkit_stats.txt",
        # "results/qc/multiqc3/multiqc_report.html",

        # "results/qc/multiqc1/multiqc_plots/svg/mqc_fastqc_per_base_sequence_quality_plot_1.svg",
        # "results/qc/multiqc2/multiqc_plots/svg/mqc_fastqc_per_base_sequence_quality_plot_1.svg",
        # "results/qc/multiqc3/multiqc_plots/svg/mqc_fastqc_per_base_sequence_quality_plot_1.svg",

        # "dags/analysis_rulegraph.svg",
        # "dags/basic_rulegraph.svg",
        # "images/smkreport/screenshot.png",
        # "images/project_tree.txt",

        # "index.html",

include: "rules/project_structure.smk"

rule import_input_data:
	output:
		metadata="resources/metadata/metadata.csv",
	shell:
		"""
		bash workflow/scripts/import_input_data.sh
		"""

# Trim raw reads
rule bbduk_trim_reads:
    input:
        script="workflow/scripts/bbduk_trim_reads.sh",    
        data=rules.import_input_data.output,
    output:
        trim=expand("resources/reads/trimmed/{accession}_{sraNum}.fastq", accession=ACCESSIONS, sraNum=config["sraNum"]),
    shell:
        "bash {input.script}"

# Decontaminate trimmed reads
rule bbduk_decontam_reads:
    input:
        script="workflow/scripts/bbduk_decontam_reads.sh",    
        data=rules.bbduk_trim_reads.output,
    output:
        decontam=expand("resources/reads/trimmed/decontam/{accession}_{sraNum}.fastq", accession=ACCESSIONS, sraNum=config["sraNum"]),
    shell:
        "bash {input.script}"

# QC1
rule seqkit_stats_raw:
    input:
        script="workflow/scripts/seqkit_stats.sh",
        reads=rules.import_input_data.output,
    output:
        "results/qc/seqkit1/seqkit_stats.txt",
    threads: 1
    shell:
        "bash {input.script}"

rule fastqc_raw:
    input:
        script="workflow/scripts/fastqc.sh",
        reads=rules.bbduk_trim_reads.output,
    output:
        html=expand("results/qc/fastqc1/{accession}_{sraNum}_fastqc.html", accession=ACCESSIONS, sraNum=config["sraNum"]),
        zip=expand("results/qc/fastqc1/{accession}_{sraNum}_fastqc.zip", accession=ACCESSIONS, sraNum=config["sraNum"]),
    threads: 1
    shell:
        "bash {input.script}"

rule multiqc_raw:
    input:
        script="workflow/scripts/multiqc.sh",
        zip=rules.fastqc_raw.output.zip,
    output:
        "results/qc/multiqc1/multiqc_report.html",
        "results/qc/multiqc1/multiqc_plots/svg/mqc_fastqc_per_base_sequence_quality_plot_1.svg",
    threads: 1
    shell:
        "bash {input.script}"

# QC2
rule seqkit_stats_trimmed:
    input:
        script="workflow/scripts/seqkit_stats.sh",
        reads=rules.bbduk_trim_reads.output,
    output:
        "results/qc/seqkit2/seqkit_stats.txt",
    threads: 1
    shell:
        "bash {input.script}"

rule fastqc_trimmed:
    input:
        script="workflow/scripts/fastqc.sh",
        reads=rules.bbduk_trim_reads.output,
    output:
        html=expand("results/qc/fastqc2/{accession}_{sraNum}_fastqc.html", accession=ACCESSIONS, sraNum=config["sraNum"]),
        zip=expand("results/qc/fastqc2/{accession}_{sraNum}_fastqc.zip", accession=ACCESSIONS, sraNum=config["sraNum"]),
    threads: 1
    shell:
        "bash {input.script}"

rule multiqc_trimmed:
    input:
        script="workflow/scripts/multiqc.sh",
        zip=rules.fastqc_trimmed.output.zip,
    output:
        "results/qc/multiqc2/multiqc_report.html",
        "results/qc/multiqc2/multiqc_plots/svg/mqc_fastqc_per_base_sequence_quality_plot_1.svg",
    threads: 1
    shell:
        "bash {input.script}"

# QC3
rule seqkit_stats_decontam:
    input:
        script="workflow/scripts/seqkit_stats.sh",
        reads=rules.bbduk_decontam_reads.output,
    output:
        "results/qc/seqkit3/seqkit_stats.txt",
    threads: 1
    shell:
        "bash {input.script}"

rule fastqc_decontam:
    input:
        script="workflow/scripts/fastqc.sh",
        reads=rules.bbduk_decontam_reads.output,
    output:
        html=expand("results/qc/fastqc3/{accession}_{sraNum}_fastqc.html", accession=ACCESSIONS, sraNum=config["sraNum"]),
        zip=expand("results/qc/fastqc3/{accession}_{sraNum}_fastqc.zip", accession=ACCESSIONS, sraNum=config["sraNum"]),
    threads: 1
    shell:
        "bash {input.script}"

rule multiqc_decontam:
    input:
        script="workflow/scripts/multiqc.sh",
        zip=rules.fastqc_decontam.output.zip,
    output:
        "results/qc/multiqc3/multiqc_report.html",
        "results/qc/multiqc3/multiqc_plots/svg/mqc_fastqc_per_base_sequence_quality_plot_1.svg",
    threads: 1
    shell:
        "bash {input.script}"

# # Get dot rule graphs
# rule basic_rulegraph:
# 	output:
# 		"dags/analysis_rulegraph.svg",
# 		"dags/analysis_rulegraph.png",
# 		"dags/basic_rulegraph.svg",
# 		"dags/basic_rulegraph.png",
# 	shell:
# 		"bash workflow/scripts/rules_dag.sh"

# # Get project tree
# rule project_tree:
#     output:
#         tree="images/project_tree.txt"
#     shell:
#         """
#         bash workflow/scripts/tree.sh
#         """

# # Get smk html report
# rule snakemake_html_report:
# 	output:
# 		"images/smkreport/screenshot.png"
# 	shell:
# 		"bash workflow/scripts/smk_html_report.sh"


rule deploy_to_github_pages:
    input:
        script="workflow/scripts/render.R",
        rmd="index.Rmd",
        html2png="images/smkreport/screenshot.png",
        # qc="images/qc_hist.svg",
        # basicSVG="dags/basic_rulegraph.svg",
        # analysisSVG="dags/analysis_rulegraph.svg",
        # treeTXT="images/project_tree.txt",
        # seqkit1="results/qc/seqkit1/seqkit_stats.txt",
        # seqkit2="results/qc/seqkit2/seqkit_stats.txt",
        # seqkit3="results/qc/seqkit3/seqkit_stats.txt",
        # multiqc1="results/qc/multiqc1/multiqc_plots/svg/mqc_fastqc_per_base_sequence_quality_plot_1.svg",
        # multiqc2="results/qc/multiqc2/multiqc_plots/svg/mqc_fastqc_per_base_sequence_quality_plot_1.svg",
        # multiqc3="results/qc/multiqc3/multiqc_plots/svg/mqc_fastqc_per_base_sequence_quality_plot_1.svg",
    output:
        doc="index.html",
    shell:
        """
        R -e "library(rmarkdown); render('{input.rmd}')"
        """


