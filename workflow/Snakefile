from snakemake.utils import min_version

min_version("6.10.0")

# Configuration file containing all user-specified settings
configfile: "config/config.yaml"


import os
import csv
import pandas as pd

METADATA=pd.read_csv('resources/metadata/metadata.csv').loc[0:3]
ACCESSIONS=METADATA['Run'].tolist() # Specify the column containing the accession, in this demo is Run

# Master rule for controlling workflow.
rule all:
    input:
        expand("resources/reads/trimmed/{accession}_{sraNum}.fastq.gz", accession=ACCESSIONS, sraNum=config["sraNum"]),
        expand("resources/reads/trimmed/decontam/{accession}_{sraNum}.fastq.gz", accession=ACCESSIONS, sraNum=config["sraNum"]),
        expand("results/qc/fastqc1/{accession}_{sraNum}_fastqc.html", accession=ACCESSIONS, sraNum=config["sraNum"]),
        expand("results/qc/fastqc1/{accession}_{sraNum}_fastqc.zip", accession=ACCESSIONS, sraNum=config["sraNum"]),
        expand("results/qc/fastqc2/{accession}_{sraNum}_fastqc.html", accession=ACCESSIONS, sraNum=config["sraNum"]),
        expand("results/qc/fastqc2/{accession}_{sraNum}_fastqc.zip", accession=ACCESSIONS, sraNum=config["sraNum"]),
        expand("results/qc/fastqc3/{accession}_{sraNum}_fastqc.html", accession=ACCESSIONS, sraNum=config["sraNum"]),
        expand("results/qc/fastqc3/{accession}_{sraNum}_fastqc.zip", accession=ACCESSIONS, sraNum=config["sraNum"]),
        
        "results/qc/seqkit1/seqkit_stats.txt",
        "results/qc/multiqc1/multiqc_report.html", 

        "results/qc/seqkit2/seqkit_stats.txt",
        "results/qc/multiqc2/multiqc_report.html",

        "results/qc/seqkit3/seqkit_stats.txt",
        "results/qc/multiqc3/multiqc_report.html",

        "results/qc/multiqc1/multiqc_plots/svg/mqc_fastqc_per_base_sequence_quality_plot_1.svg",
        "results/qc/multiqc2/multiqc_plots/svg/mqc_fastqc_per_base_sequence_quality_plot_1.svg",
        "results/qc/multiqc3/multiqc_plots/svg/mqc_fastqc_per_base_sequence_quality_plot_1.svg",

        "dags/rulegraph.svg",
        "images/smkreport/screenshot.png",
        "images/project_tree.txt",

        "index.html",


# Trim raw reads
rule bbduk_trim_reads:
    input:
        script="workflow/scripts/bbduk_trim_reads.sh",    
        read=expand("resources/reads/{accession}_{sraNum}.fastq.gz", accession=ACCESSIONS, sraNum=config["sraNum"]),
    output:
        trim=expand("resources/reads/trimmed/{accession}_{sraNum}.fastq.gz", accession=ACCESSIONS, sraNum=config["sraNum"]),
    shell:
        "bash {input.script}"

# Decontaminate trimmed reads
rule bbduk_decontam:
    input:
        script="workflow/scripts/bbduk_decontam.sh",    
        read=expand("resources/reads/trimmed/{accession}_{sraNum}.fastq.gz", accession=ACCESSIONS, sraNum=config["sraNum"]),
    output:
        decont=expand("resources/reads/trimmed/decontam/{accession}_{sraNum}.fastq.gz", accession=ACCESSIONS, sraNum=config["sraNum"]),
    shell:
        "bash {input.script}"

# QC1
rule seqkit_stats_raw:
    input:
        script="workflow/scripts/seqkit_raw.sh",
        read=expand("resources/reads/{accession}_{sraNum}.fastq.gz", accession=ACCESSIONS, sraNum=config["sraNum"]),
    output:
        "results/qc/seqkit1/seqkit_stats.txt",
    threads: 1
    shell:
        "bash {input.script}"

rule fastqc_raw:
    input:
        script="workflow/scripts/fastqc_raw.sh",
        reads=expand("resources/reads/trimmed/{accession}_{sraNum}.fastq.gz", accession=ACCESSIONS, sraNum=config["sraNum"]),
    output:
        html=expand("results/qc/fastqc1/{accession}_{sraNum}_fastqc.html", accession=ACCESSIONS, sraNum=config["sraNum"]),
        zip=expand("results/qc/fastqc1/{accession}_{sraNum}_fastqc.zip", accession=ACCESSIONS, sraNum=config["sraNum"]),
    threads: 1
    shell:
        "bash {input.script}"

rule multiqc_raw:
    input:
        script="workflow/scripts/multiqc_raw.sh",
        zip=rules.fastqc_raw.output.zip,
    output:
        "results/qc/multiqc1/multiqc_report.html",
        "results/qc/multiqc1/multiqc_plots/svg/mqc_fastqc_per_base_sequence_quality_plot_1.svg",
    threads: 1
    shell:
        "bash {input.script}"

# QC2
rule seqkit_stats_trimmed:
    input:
        script="workflow/scripts/seqkit_trim.sh",
        reads=expand("resources/reads/trimmed/{accession}_{sraNum}.fastq.gz", accession=ACCESSIONS, sraNum=config["sraNum"]),
    output:
        "results/qc/seqkit2/seqkit_stats.txt",
    threads: 1
    shell:
        "bash {input.script}"

rule fastqc_trimmed:
    input:
        script="workflow/scripts/fastqc_trim.sh",
        reads=expand("resources/reads/trimmed/{accession}_{sraNum}.fastq.gz", accession=ACCESSIONS, sraNum=config["sraNum"]),
    output:
        html=expand("results/qc/fastqc2/{accession}_{sraNum}_fastqc.html", accession=ACCESSIONS, sraNum=config["sraNum"]),
        zip=expand("results/qc/fastqc2/{accession}_{sraNum}_fastqc.zip", accession=ACCESSIONS, sraNum=config["sraNum"]),
    threads: 1
    shell:
        "bash {input.script}"

rule multiqc_trimmed:
    input:
        script="workflow/scripts/multiqc_trim.sh",
        zip=rules.fastqc_trimmed.output.zip,
    output:
        "results/qc/multiqc2/multiqc_report.html",
        "results/qc/multiqc2/multiqc_plots/svg/mqc_fastqc_per_base_sequence_quality_plot_1.svg",
    threads: 1
    shell:
        "bash {input.script}"

# QC3
rule seqkit_stats_decontam:
    input:
        script="workflow/scripts/seqkit_decontam.sh",
        reads=expand("resources/reads/trimmed/decontam/{accession}_{sraNum}.fastq.gz", accession=ACCESSIONS, sraNum=config["sraNum"]),
    output:
        "results/qc/seqkit3/seqkit_stats.txt",
    threads: 1
    shell:
        "bash {input.script}"

rule fastqc_decontam:
    input:
        script="workflow/scripts/fastqc_decontam.sh",
        reads=expand("resources/reads/trimmed/decontam/{accession}_{sraNum}.fastq.gz", accession=ACCESSIONS, sraNum=config["sraNum"]),
    output:
        html=expand("results/qc/fastqc3/{accession}_{sraNum}_fastqc.html", accession=ACCESSIONS, sraNum=config["sraNum"]),
        zip=expand("results/qc/fastqc3/{accession}_{sraNum}_fastqc.zip", accession=ACCESSIONS, sraNum=config["sraNum"]),
    threads: 1
    shell:
        "bash {input.script}"

rule multiqc_decontam:
    input:
        script="workflow/scripts/multiqc_decontam.sh",
        zip=rules.fastqc_decontam.output.zip,
    output:
        "results/qc/multiqc3/multiqc_report.html",
        "results/qc/multiqc3/multiqc_plots/svg/mqc_fastqc_per_base_sequence_quality_plot_1.svg",
    threads: 1
    shell:
        "bash {input.script}"

# Get dot rule graphs
rule dot_rules_graph:
	output:
		"dags/rulegraph.svg",
		"dags/rulegraph.png",
	shell:
		"bash workflow/scripts/rules_dag.sh"


# Get project tree
rule project_tree:
    output:
        tree="results/project_tree.txt"
    shell:
        """
        bash workflow/scripts/tree.sh
        """

# Get smk static report
rule static_snakemake_report:
    output:
        smkhtml="report.html",
        html2png="images/smkreport/screenshot.png"
    shell:
        """
        bash workflow/scripts/smk_html_report.sh
        """

# Plot stats hist
rule plot_read_sta_hist:
    input:
        stats1="results/qc/seqkit1/seqkit_stats.txt",
        stats2="results/qc/seqkit2/seqkit_stats.txt",
        stats3="results/qc/seqkit3/seqkit_stats.txt",
    output:
        statspng="images/qc_hist.png",
        statssvg="images/qc_hist.svg",
    script:
        "scripts/plot_qc_bar.R"

rule deploy_to_github_pages:
    input:
        script="workflow/scripts/render.R",
        rmd="index.Rmd",
        html2png="images/smkreport/screenshot.png",
        statssvg="images/qc_hist.svg",
        rules="dags/rulegraph.svg",
        tree="images/project_tree.txt",
        seqkit1="results/qc/seqkit1/seqkit_stats.txt",
        seqkit2="results/qc/seqkit2/seqkit_stats.txt",
        seqkit3="results/qc/seqkit3/seqkit_stats.txt",
        multiqc1="results/qc/multiqc1/multiqc_plots/svg/mqc_fastqc_per_base_sequence_quality_plot_1.svg",
        multiqc2="results/qc/multiqc2/multiqc_plots/svg/mqc_fastqc_per_base_sequence_quality_plot_1.svg",
        multiqc3="results/qc/multiqc3/multiqc_plots/svg/mqc_fastqc_per_base_sequence_quality_plot_1.svg",
    output:
        doc="index.html",
    shell:
        """
        R -e "library(rmarkdown); render('{input.rmd}')"
        """


